
# https://stackoverflow.com/questions/2460177/edit-distance-in-python#32558749
from typing import List


def levenshteinDistance(s1, s2):
    if len(s1) > len(s2):
        s1, s2 = s2, s1

    distances = range(len(s1) + 1)
    for i2, c2 in enumerate(s2):
        distances_ = [i2+1]
        for i1, c1 in enumerate(s1):
            if c1 == c2:
                distances_.append(distances[i1])
            else:
                distances_.append(1 + min((distances[i1], distances[i1 + 1], distances_[-1])))
        distances = distances_
    return distances[-1]

def get_token_type(token: str) -> str:
    if 'n' in token:
        return 'n'
    elif 'd' in token:
        return 'd'
    elif token == "xxsep":
        return "xxsep"
    else:
        raise Exception(f"Unknown token type: {token}")

def token_by_token(expected: str, generated: str) -> int:
    """Compute the distance metric between two tokens
    
    Same token type: look for the difference between the associated number
    Ex: n84 vs n98 => |84-94| = 10

    Different token type: 100

    Args:
        expected (str): Expected token
        generated (str): Generated token

    Returns:
        int: Distance, 0 being the same
    """
    expected_type = get_token_type(expected)
    generated_type = get_token_type(generated)

    if expected_type == "xxsep" or generated_type == "xxsep":
        return 100
    else:
        expected_int = int(expected[1:])
        generated_int = int(generated[1:])
        return abs(expected_int - generated_int)

def musicDistance(expected: List[str], generated: List[str]) -> int:
    score = 0
    for expected_token, generated_token in zip(expected[2:], generated[2:]):
        score += token_by_token(expected_token, generated_token)
    return score

def fixed_premise_distance(expected_file: str) -> int:
    with open(expected_file, 'r') as file:
        expected = file.read()
    expected = expected.split()

    from generate_kenlm_python2 import init_kenlm, set_kenlm_premise, next_most_likely_token

    init_kenlm("models/kenlm/order16.bin", "data/JSB Chorales/voc_musicautobot.voc")

    score = 0

    premise = []
    for token in expected:
        set_kenlm_premise(premise)
        next_token = next_most_likely_token()

        score += token_by_token(token, next_token)

        premise.append(token)

    return score

def main():
    import sys
    if len(sys.argv) != 4:
        print("Usage: distance.py expected_file generated_file [--levenshtein | --music]")
        exit(1)

    expected_file = sys.argv[1]
    generated_file = sys.argv[2]
    mode = sys.argv[3]

    with open(expected_file, 'r') as file:
        expected = file.read()
    with open(generated_file, 'r') as file:
        generated = file.read()
    
    # even the lengths of the files
    expected_tokens = expected.split()
    expected_size = len(expected_tokens)
    generated_tokens = generated.split()
    generated_size = len(generated_tokens)

    if expected_size < generated_size:
        generated_tokens = generated_tokens[:expected_size]
    else:
        expected_tokens = expected_tokens[:generated_size]

    if mode == "--levenshtein":
        print(levenshteinDistance(" ".join(expected_tokens), " ".join(generated_tokens)))
    elif mode == "--music":
        print(musicDistance(expected_tokens, generated_tokens))

if __name__ == "__main__":
    main()